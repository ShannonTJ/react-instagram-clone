{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shann\\\\Desktop\\\\Web Dev Course\\\\FreeCodeCamp YT\\\\react-instagram-clone\\\\components\\\\main\\\\Save.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from \"firebase\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-storage\");\n\nexport default function Save(props, _ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var uploadImage = function uploadImage() {\n    var uri, childPath, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uri = props.route.params.image;\n            childPath = \"post/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 7:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n                console.log(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").add({\n      downloadURL: downloadURL,\n      caption: caption,\n      creation: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      props.navigation.popToTop();\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.route.params.image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Write a caption...\",\n    onChangeText: function onChangeText(caption) {\n      return setCaption(caption);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Save\",\n    onPress: function onPress() {\n      return uploadImage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/shann/Desktop/Web Dev Course/FreeCodeCamp YT/react-instagram-clone/components/main/Save.js"],"names":["React","useState","firebase","NavigationContainer","require","Save","props","navigation","caption","setCaption","uploadImage","uri","route","params","image","childPath","auth","currentUser","uid","Math","random","toString","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","console","log","bytesTransferred","taskCompleted","getDownloadURL","then","savePostData","taskError","on","downloadURL","firestore","collection","doc","add","creation","FieldValue","serverTimestamp","popToTop","flex"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,mBAAT,QAAoC,0BAApC;;AACAC,OAAO,CAAC,oBAAD,CAAP;;AACAA,OAAO,CAAC,2BAAD,CAAP;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,QAAqC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,kBACpBN,QAAQ,CAAC,EAAD,CADY;AAAA;AAAA,MAC3CO,OAD2C;AAAA,MAClCC,UADkC;;AAGlD,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,GADY,GACNL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,KADb;AAEZC,YAAAA,SAFY,aAGhBb,QAAQ,CAACc,IAAT,GAAgBC,WAAhB,CAA4BC,GAHZ,SAIdC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,CAJc;AAAA;AAAA,6CAMKC,KAAK,CAACX,GAAD,CANV;;AAAA;AAMZY,YAAAA,QANY;AAAA;AAAA,6CAOCA,QAAQ,CAACC,IAAT,EAPD;;AAAA;AAOZA,YAAAA,IAPY;AASZC,YAAAA,IATY,GASLvB,QAAQ,CAACwB,OAAT,GAAmBC,GAAnB,GAAyBC,KAAzB,CAA+Bb,SAA/B,EAA0Cc,GAA1C,CAA8CL,IAA9C,CATK;;AAWZM,YAAAA,YAXY,GAWG,SAAfA,YAAe,CAACC,QAAD,EAAc;AACjCC,cAAAA,OAAO,CAACC,GAAR,mBAA4BF,QAAQ,CAACG,gBAArC;AACD,aAbiB;;AAeZC,YAAAA,aAfY,GAeI,SAAhBA,aAAgB,GAAM;AAC1BV,cAAAA,IAAI,CAACM,QAAL,CAAcJ,GAAd,CAAkBS,cAAlB,GAAmCC,IAAnC,CAAwC,UAACN,QAAD,EAAc;AACpDO,gBAAAA,YAAY,CAACP,QAAD,CAAZ;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,eAHD;AAID,aApBiB;;AAsBZQ,YAAAA,SAtBY,GAsBA,SAAZA,SAAY,CAACR,QAAD,EAAc;AAC9BC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,aAxBiB;;AA0BlBN,YAAAA,IAAI,CAACe,EAAL,CAAQ,eAAR,EAAyBV,YAAzB,EAAuCS,SAAvC,EAAkDJ,aAAlD;;AA1BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AA6BA,MAAMG,YAAY,GAAG,SAAfA,YAAe,CAACG,WAAD,EAAiB;AACpCvC,IAAAA,QAAQ,CACLwC,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGC,GAHH,CAGO1C,QAAQ,CAACc,IAAT,GAAgBC,WAAhB,CAA4BC,GAHnC,EAIGyB,UAJH,CAIc,WAJd,EAKGE,GALH,CAKO;AACHJ,MAAAA,WAAW,EAAXA,WADG;AAEHjC,MAAAA,OAAO,EAAPA,OAFG;AAGHsC,MAAAA,QAAQ,EAAE5C,QAAQ,CAACwC,SAAT,CAAmBK,UAAnB,CAA8BC,eAA9B;AAHP,KALP,EAUGX,IAVH,CAUQ,YAAY;AAChB/B,MAAAA,KAAK,CAACC,UAAN,CAAiB0C,QAAjB;AACD,KAZH;AAaD,GAdD;;AAgBA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEvC,MAAAA,GAAG,EAAEL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC;AAA1B,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,SAAD;AACE,IAAA,WAAW,EAAC,oBADd;AAEE,IAAA,YAAY,EAAE,sBAACN,OAAD;AAAA,aAAaC,UAAU,CAACD,OAAD,CAAvB;AAAA,KAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAME,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,OAAO,EAAE;AAAA,aAAME,WAAW,EAAjB;AAAA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, TextInput, Image, Button } from \"react-native\";\r\nimport firebase from \"firebase\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nrequire(\"firebase/firestore\");\r\nrequire(\"firebase/firebase-storage\");\r\n\r\nexport default function Save(props, { navigation }) {\r\n  const [caption, setCaption] = useState(\"\");\r\n\r\n  const uploadImage = async () => {\r\n    const uri = props.route.params.image;\r\n    const childPath = `post/${\r\n      firebase.auth().currentUser.uid\r\n    }/${Math.random().toString(36)}`;\r\n\r\n    const response = await fetch(uri);\r\n    const blob = await response.blob();\r\n\r\n    const task = firebase.storage().ref().child(childPath).put(blob);\r\n\r\n    const taskProgress = (snapshot) => {\r\n      console.log(`transferred: ${snapshot.bytesTransferred}`);\r\n    };\r\n\r\n    const taskCompleted = () => {\r\n      task.snapshot.ref.getDownloadURL().then((snapshot) => {\r\n        savePostData(snapshot);\r\n        console.log(snapshot);\r\n      });\r\n    };\r\n\r\n    const taskError = (snapshot) => {\r\n      console.log(snapshot);\r\n    };\r\n\r\n    task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\r\n  };\r\n\r\n  const savePostData = (downloadURL) => {\r\n    firebase\r\n      .firestore()\r\n      .collection(\"posts\")\r\n      .doc(firebase.auth().currentUser.uid)\r\n      .collection(\"userPosts\")\r\n      .add({\r\n        downloadURL,\r\n        caption,\r\n        creation: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .then(function () {\r\n        props.navigation.popToTop();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <Image source={{ uri: props.route.params.image }} />\r\n      <TextInput\r\n        placeholder=\"Write a caption...\"\r\n        onChangeText={(caption) => setCaption(caption)}\r\n      />\r\n      <Button title=\"Save\" onPress={() => uploadImage()} />\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}